Feb 24, 2025  13:37                            *PROCESS DBG(arg_count);                                                 
1.3.2                                               Source Listing                                           Page 1     
    1  *PROCESS DBG(arg_count); 
    2  leven: procedure(parm) options(main);
    3 
    4   dcl parm     char(100) varying;   
    5   dcl (s1, s2) char(256) varying; /* adjust length as needed */
    6   dcl (m, n, i, j) fixed bin(31);
    7   dcl (cost, distance, min_distance) fixed bin(31); 
    8   dcl comparisons fixed bin(31);
    9   dcl prev(0:256) fixed bin(31); /* adjust array size as needed */
   10   dcl curr(0:256) fixed bin(31); /* adjust array size as needed */
   11   dcl arg(10) char(256) varying; /* array to hold command line args. */
   12   dcl arg_count fixed bin(31) init(0);  
   13   dcl sysprint file stream output;
   14 
   15      
   16   
   17   /* PL/I one can have a single string as 
   18   parameter. It must be cut first in  2*/   
   19   call subbstring_extractor(parm); 
   20   put skip list("New Version");
   21   put skip data(arg_count);
   22   put skip data(arg(1), arg(2));
   23   if arg_count < 2 then do;    
   24     put skip list('usage: program_name <string1> <string2> ...');
   25     return;
   26   end;
   27 
   28   min_distance = 2**30; /* equivalent to long.max_value */
   29   comparisons = 0;
   30 
   31   do i = 1 to arg_count;
   32     do j = 1 to arg_count;        
   33       if ((i < j) | (i > j) | (j < i) | (j > i)) then do; /*NOT sign */
   34         s1 = arg(i);
   35         s2 = arg(j);            
   36         distance = levenshtein_distance(s1, s2);
   37         min_distance = min(min_distance, distance);
   38                     put skip data(distance,min_distance);
   39         comparisons = comparisons + 1;
   40       end;
   41     end;
   42   end;
   43 
   44   put skip list('times: ' || comparisons);
   45   put skip list('min_distance: ' || min_distance);
   46 
   47   return;
   48 
   49  levenshtein_distance: procedure(s1, s2) returns(fixed bin(31));
   50   dcl (s1, s2, tempi) char(256) varying;
   51   dcl (m, n, i, j) fixed bin(31);
   52   dcl cost fixed bin(31);
   53   dcl prev(m) controlled fixed bin(31);
   54   dcl curr(m) controlled fixed bin(31);
   55   dcl temp(m) controlled fixed bin(31);
   56 
   57       
   58   if length(s1) > length(s2) then do;
Feb 24, 2025  13:37                            *PROCESS DBG(arg_count);                                                 
1.3.2                                               Source Listing                                           Page 2     
   59     tempi = s1;
   60     s1 = s2;
   61     s2 = tempi;
   62   end;
   63   
   64   m = length(s1);
   65   n = length(s2);
   66 
   67   allocate prev;
   68   allocate curr;
   69   allocate temp;
   70   
   71   do j = 0 to m;
   72     prev(j) = j;
   73   end;
   74   
   75   do i = 1 to n;
   76     curr(1) = i;
   77         
   78     do j = 1 to m;
   79       if substr(s1, j, 1) = substr(s2, i, 1) then
   80         cost = 0;
   81       else
   82         cost = 1;
   83 
   84       curr(j) = min(min(prev(j) + 1, curr(j - 1) + 1), prev(j - 1) 
   85                 + cost);
   86     end;
   87     
   88     temp = prev;  
   89     prev = curr;
   90     curr = temp;
   91   end;  
   92   return(prev(m));
   93 
   94  end levenshtein_distance;
   95 
   96  substring_extractor: procedure(parm);
   97   /* this procedure trims 'parm' in several substrings */
   98   dcl parm char(100) varying;    
   99   dcl i fixed bin(31);
  100   /* keep track of current search position */
  101   dcl current_pos fixed bin(31) initial(1);   
  102   dcl space_pos fixed bin(31);
  103   dcl substring_count fixed bin(31) initial(0);
  104   dcl temp_parm char(100) varying; /* temporary string for searching */
  105 
  106   /* example parm value - replace with your actual input method */  
  107 
  108   temp_parm = parm; /* initialize temporary string */
  109   
  110   do while(substring_count < 2);
  111     /* find the next space */
  112     space_pos = search(temp_parm, ' ');
  113 
  114     if space_pos = 0 then do; /* no more spaces */
  115       if length(temp_parm) > 0 then do; /*check for empty string*/
  116         substring_count = substring_count + 1;
Feb 24, 2025  13:37                            *PROCESS DBG(arg_count);                                                 
1.3.2                                               Source Listing                                           Page 3     
  117         arg(substring_count) = temp_parm;
  118       end;
  119       leave; /* exit the loop */
  120     end;
  121     else do;
  122       substring_count = substring_count + 1;
  123       arg(substring_count) = substr(temp_parm, 1, space_pos - 1);
  124 
  125       /*remove the extracted substring and leading spaces from t_parm*/
  126       temp_parm = substr(temp_parm, space_pos);
  127       do while (length(temp_parm) > 0 & substr(temp_parm,1,1) = ' ');
  128           temp_parm = substr(temp_parm, 2);
  129       end;
  130     end;
  131   end;
  132 
  133   /* output the extracted substrings 
  134   put skip list('number of substrings found: ' || substring_count);
  135   do i = 1 to substring_count;
  136     put skip list('arg(' || i || '): ''' || arg(i) || '''');
  137   end;
  138   For debugging only
  139   */
  140 
  141     /* handle cases with less than two substrings */
  142     if substring_count < 2 then do;
  143         put skip list('less than two substrings found!');
  144     end;
  145         
  146   arg_count = substring_count;  
  147 
  148  end substring_extractor;
  149  
  150  end leven;
19 (WRN557)Undeclared variable SUBBSTRING_EXTRACTOR has been assigned default attributes "EXTERNAL ENTRY".
Feb 24, 2025  13:37                            *PROCESS DBG(arg_count);                                                 
1.3.2                                               Procedure Map                                            Page 4     
  Offset  Line Statement type             Offset  Line Statement type             Offset  Line Statement type           
      0C     2 PROCEDURE                LEVEN
      3A    12 DCL                            3A    19 CALL                           77    20 PUT                      
      E8    21 PUT                          0159    22 PUT                          01F6    23 IF                       
    0205    23 DO                           0205    24 PUT                          0276    25 RETURN                   
    027B    26 END                          027B    28 Assignment                   02E1    29 Assignment               
    02EB    31 DO                           0332    32 DO                           0379    33 IF                       
    03CD    33 DO                           03CD    34 Assignment                   03F5    35 Assignment               
    041D    36 Assignment                   0483    37 Assignment                   049D    38 PUT                      
    053A    39 Assignment                   0548    40 END                          054E    41 END                      
    055F    42 END                          056D    44 PUT                          067D    45 PUT                      
    078D    47 RETURN                   

    0797    49 PROCEDURE                LEVENSHTEIN_DISTANCE
    07D7    53 DCL                          07F1    54 DCL                          080B    55 DCL                      
    080B    58 IF                           0823    58 DO                           0823    59 Assignment               
    0838    60 Assignment                   084E    61 Assignment                   0869    62 END                      
    0869    64 Assignment                   0877    65 Assignment                   0885    67 ALLOC                    
    08DE    68 ALLOC                        0937    69 ALLOC                        0990    71 DO                       
    09D7    72 Assignment                   0A28    73 END                          0A33    75 DO                       
    0A7A    76 Assignment                   0AC9    78 DO                           0B10    79 IF                       
    0B46    80 Assignment                   0B50    81 ELSE                         0B55    82 Assignment               
    0B5F    84 Assignment                   0C9A    86 END                          0CAB    88 Assignment               
    0DA9    89 Assignment                   0EA7    90 Assignment                   0FA5    91 END                      
    0FB3    92 RETURN                       100A    94 END                      

    101A    96 PROCEDURE                SUBSTRING_EXTRACTOR
    103F   101 DCL                          103F   103 DCL                          103F   108 Assignment               
    1054   110 DO                           106C   112 Assignment                   108B   114 IF                       
    1097   114 DO                           1097   115 IF                           10A7   115 DO                       
    10A7   116 Assignment                   10AF   117 Assignment                   10D8   118 END                      
    10D8   119 LEAVE                        10DD   120 END                          10DD   121 ELSE                     
    10E2   121 DO                           10E2   122 Assignment                   10EA   123 Assignment               
    112C   126 Assignment                   1166   127 DO                           119D   128 Assignment               
    11C9   129 END                          11D1   130 END                          11D1   131 END                      
    11DC   142 IF                           11E8   142 DO                           11E8   143 PUT                      
    1259   144 END                          1259   146 Assignment                   1265   148 END                      
    126A   148 Initialization               1284   150 END                          1289   150 Initialization           
Feb 24, 2025  13:37                            *PROCESS DBG(arg_count);                                                 
1.3.2                                  Symbol Table and Cross-Reference Listing                              Page 5     
ARG                   11    22    34    35   117   123 
ARG_COUNT             12    21    23    31    32   146 
COMPARISONS            8    29    39    44 
COST                   7 
COST                  52    80    82    84 
CURR                  10 
CURR                  54    68    76    84    89    90 
CURRENT_POS          101 
DISTANCE               7    36    37    38 
I                      6    31    33    34 
I                     51    75    76    79 
I                     99 
J                      6    32    33    35 
J                     51    71    72    78    79    84 
LENGTH                58    58    64    65   115   127 
LEVEN                  2 
LEVENSHTEIN_DISTANCE
                      49    36 
M                      6 
M                     51    53    54    55    64    71    78    92 
MIN                   37    37    84 
MIN_DISTANCE           7    28    37    38    45 
N                      6 
N                     51    65    75 
PARM                   4    19 
PARM                  98   108 
PREV                   9 
PREV                  53    67    72    84    88    89    92 
S1                     5    34    36 
S1                    50    58    59    60    64    79 
S2                     5    35    36 
S2                    50    58    60    61    65    79 
SEARCH               112   112 
SPACE_POS            102   112   114   123   126 
SUBBSTRING_EXTRACTOR
                      19*   19 
SUBSTR                79    79   123   126   127   128 
SUBSTRING_COUNT      103   110   116   117   122   123   142   146 
SUBSTRING_EXTRACTOR   96 
SYSPRINT              13    20    21    22    24    38    44    45   143 
TEMP                  55    69    88    90 
TEMPI                 50    59    61 
TEMP_PARM            104   108   112   115   117   123   126   127   128 
Feb 24, 2025  13:37                            *PROCESS DBG(arg_count);                                                 
1.3.2                                            Undeclared Variables                                        Page 6     
1 undeclared variables.
SUBBSTRING_EXTRACTOR(19) 

End of compilation. 
